<!DOCTYPE html>
<!-- saved from url=(0032)http://127.0.0.1:5500/index.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">



    
        
        
        <title>Ali Baker</title>
    <link rel="stylesheet" href="./Ali Baker_files/stylesheet.css"></head>

    <body>
        <div class="name">
            <b>ali baker</b>
        </div>


        <div class="tabs">
           
            <button class="" "tablink"="">about</button>
            <button class="" "tablink"="">projects</button>


        </div>



        <div class="intro">
                <h1>&gt;salam!</h1> 
                <h5>-- my name is ali baker</h5>
                <h5>-- i am a computer science engineer</h5> 
                <h5>-- i study at the university of michigan </h5>
                <h5>-- i am interested in signal processing, music, cyber-security, and video games</h5>
        </div>

        <div class="projectsec">
                <h1>&gt;current projects</h1>
                <ul>
                    <li title="project_arcade">
                        <img src="./Ali Baker_files/arcade_icon.png" alt="tissuebox" width="150" height="150">
                    </li>
                    <li title="project_note">
                        <img src="./Ali Baker_files/music_note.png" alt="note" width="150" height="150">
                    </li>
                    <li title="project_fineness">
                        <img src="./Ali Baker_files/fineness.png" alt="fineness" width="150" height="150">
                    </li>




                </ul>
               

        </div>
        

    <!-- Code injected by live-server -->
<script type="text/javascript">
	// <![CDATA[  <-- For SVG support
	if ('WebSocket' in window) {
		(function () {
			function refreshCSS() {
				var sheets = [].slice.call(document.getElementsByTagName("link"));
				var head = document.getElementsByTagName("head")[0];
				for (var i = 0; i < sheets.length; ++i) {
					var elem = sheets[i];
					var parent = elem.parentElement || head;
					parent.removeChild(elem);
					var rel = elem.rel;
					if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
						var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
						elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
					}
					parent.appendChild(elem);
				}
			}
			var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
			var address = protocol + window.location.host + window.location.pathname + '/ws';
			var socket = new WebSocket(address);
			socket.onmessage = function (msg) {
				if (msg.data == 'reload') window.location.reload();
				else if (msg.data == 'refreshcss') refreshCSS();
			};
			if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
				console.log('Live reload enabled.');
				sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
			}
		})();
	}
	else {
		console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
	}
	// ]]>
</script>


</body></html>